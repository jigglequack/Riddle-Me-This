extends master.pug
block head    
    link(rel='stylesheet', href='style.css')
    link(rel='stylesheet', href='static/index.css')       
    link(href='https://fonts.googleapis.com/css?family=Permanent+Marker&display=swap', rel='stylesheet')
block content
    .userboard
      #users
        p#user
    |     
    .gameContainer
      //p #{riddles}
      p#demo
      p#answer
    |     
    ul.pages
      li.chat.page
        .stripe
          h1
            a(href='/')  Riddle Me This!
        .gameButtons
          button.gameAction.joinGame(placeholder='Join Game') Public Game
          |          
          br
          |
          button.gameAction.joinExGame(placeholder='Join Existing Game') Private Game
          |
          input.joinExGameInput(type='text', name='joinExGameInput', placeholder=' ☺ ', required='')
          |          
          br
          |
          button.gameAction.createPriGame(placeholder='Create New Game') Create Private Game
          |
          #roundTimeContainer
            #minContainer
              label.countTimeLabel.small-text  min 
                #input_div
                  input.incdec.top(type='button', value='^', onclick='plus(1, true)')
                  |     
                  br
                  |   
                  input#countMin.countTime(type='text', size='25', value='1', readonly='readonly')
                  |   
                  br
                  |     
                  input.incdec.bottom(type='button', value='v', onclick='minus(1, true)')
            #secContainer
              label.countTimeLabel.small-text sec
                #input_div
                  input.incdec.top(type='button', value='^', onclick='plus(30, false)')
                  |     
                  br
                  |   
                  input#countSec.countTime(type='text', size='25', value='30', readonly='readonly')
                  |   
                  br
                  |     
                  input.incdec.bottom(type='button', value='v', onclick='minus(30, false)')
          |
          br
          |             
          button.gameAction.leaveGame(placeholder='Leave Game') Back to Lobby
          |          
          br
        |         
        .chatContainer
          ul.messages
        |       
        input.inputMessage(placeholder='Type here...')
      |         
      li.usersList
        .usersList
          ul.Users
      li.login.page
        .stripe
          h1
            a(href='/')  Riddle Me This!
        #avatar_container
          #avatar_select
          |                 
          label.label1.small-text  choose your fighter
        #usernamecontainer.form                  
            input.usernameInput(type='text', name='username', placeholder=' ☺', required='')
            |
            input#go.button1(type='submit', value='Go!', onkeypress='return event.keyCode != 13')
            |                       
            label.label1.small-text(for='username', style='top:50%')  nickname
        #info_container
          button.accordion(id='collapse in', data-parent='#accordion') Updates
          |             
          .panel
            p And I oop-
          |             
          button.accordion(data-parent='#accordion') How to Play
          |
          .panel
            p ????????????/
          |             
          button.accordion(data-parent='#accordion') About
          |             
          .panel
            p Riddle Me This! is a sdjfsdf

    |     
    script(src='https://code.jquery.com/jquery-1.10.2.min.js')
    |     
    script(src='/socket.io/socket.io.js')
    |     
    script(src='/main.js')
    |   
    script(type='text/javascript').

    |
    script.
      var acc = document.getElementsByClassName("accordion");
      var i;

      for (i = 0; i < acc.length; i++) {
        acc[i].addEventListener("click", function() {
          this.classList.toggle("active");
          var panel = this.nextElementSibling;
          if (panel.style.maxHeight){
            panel.style.maxHeight = null;
          } else {
            panel.style.maxHeight = panel.scrollHeight + "px";
          } 
        });
      }
    |
    script.
      function plus(num, minute){
        let max; let min;
        let elem; let count; let string;
        
        if (minute){
         max = 5;
         min = 1;
         elem = document.getElementById("countMin");
         count = ~~elem.value;
        }
        
        else {
          max = 30;
          min = 0;
          elem = document.getElementById("countSec");
          count = ~~elem.value;
        }
        
        console.log(num, max, num < max);
        if (elem.value < max){
          count += num;
          elem.value = count;
        }
      }



      function minus(num, minute){
        let max; let min;
        let elem; let count; let string;
        
        if (minute){
         max = 5;
         min = 1;
         elem = document.getElementById("countMin");
         count = ~~elem.value;
        }
        
        else {
          max = 30;
          min = 0;
          elem = document.getElementById("countSec");
          count = ~~elem.value;
        }
        
        var countSec = document.getElementById("countSec");
        var countMin = document.getElementById("countMin");
        
        if ((elem.value > min && countMin.value!=0) || (countMin.value > 0 && ~~countSec.value==30) ) {
          count -= num;
          elem.value = count;
        }  
      }
      

